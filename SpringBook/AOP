AOP
  -Aspect 설정
  -pointcut- 어디에 적용 --- joinpoint 적용 
  -advice- 언제
  -aop:around 모두 합쳐둔 것 . before, around.
  -pointcut - around 한번에 정리할 수도 있다.

Advice에 따라 메소드 구현 방법에 차이가 난다. 
  -operation()메소드 동작 원하면. 클라이언트가 AOP걸면 aspect 실행 전에 before메소드가 먼저 동작
  -aop proxy가 그 메서드를 호출함. 
  -afterreturning -- 메서드가 먼저 돌고나서 설정한 aspect가 돌아간다. 
  -afterthrowing, throwing="ex" - 예외 발생시 "ex"에 저장한다. 
  -afteradvice -- afterreturning, afterthrowing 합친 것. 
  -joinPoint.proceed() 핵심 모듈 실행. ****
  -ProceedingJoinPoint joinPoint -- 핵심 모듈 받는 생성자. 

자바 @Annotationt으로 생성   <aop:aspect -autoproxy/> 필수, 빈으로 aspect 등록 필수
  -@Aspect (Pointcut, Around 포함)
  -@PointCut (경로지정)
  -@Around (사용될 메소드)
  -XML 설정 후 Annotation 사용할 수 있다. 
  
 JoinPOint 사용시
  -joinPoint.getSignature() 호출되는 메서드에 대한 정보 구한다
  -joinPOint.getArgs() - 파라미터 목록 구함
  -joinPOint.getTarget() 대상 객체 구하기.
  
  -getName() 메소드 구함. toLongString() 메소드 이름 꺼내오기. 
  -after-returning: 핵심 모듈에서 작업한 후 공통 모듈 작동. (매개 변수로 값을 받을 수 있다)
  -**핵심과 공통모듈 매개변수 맞추기 위해 사용하는 args( "" )
  
  
AOP 프록시 객체 생성 방식 설정
  -execution .. (이 패키지 포함 전체 패키지) *(class) *(method)
  -within (특정 클래스 안에 모든 메서드)
  -스프링 컨테이너에 등록된 어떠한 빈이 동작할 때 AOP 동작 -- within(패키지명) || execution(패키지명) || bean
  -하나 이상의 PointCut 조합도 가능. 
  -
