SPRING DI

의존이란

의존 객체 직접 생성 방식
-다른 클래스의 객체를 가져다 쓴다 -- 다른 클래스 의존하기.
-다른 클래스의 생성자의 파라미터를 가져다 쓰는 경우도 있다. --- 의존하는 타입의 객체 전달받기
  
  단점?
    요구사항이 바뀌면-- 다른 클래스 객체 사용시
    해당 객체에서 바꿔줘야 한다. --- 코드양이 많아짐(각각 구현 필요)
    
  보완!
의존 객체 외부에서 조립 방식
  -다른 코드에서 의존 객체 생성
  -의존 객체를 파라미터로 전달.
  -Assembler 예제)조립품을 모아서 객체 생성해서 메소드를 가져다 쓴다. 
  -Assembler 조립기로 가져다가 변경사항이 있으면 조립기에서 변경해서 쓴다.
  -기존 클래스 정보는 그대로 유지. 
예)  private Encrytor enc;
     public Assembler(){
        enc=new FastEncryptor();
        //enc를 변경해도 Encryptor객체를 DI로 전달받는 코드는 영향받지 않는다.
   
  -다른 클래서의 객체로 참조 가능
  -참조하는 클래스 메서드를 @Override해서 fake객체로 그 메서드를 가져다 구현해서 기존 클래스 TESTING 가능
  (참조하는 클래스 메소드가 미구현이어도 그것에 대한 제약 없이 기존 클래스를 태스트할 수 있다. 
 
 생성자 방식 VS 프로퍼티 설정 방식(더 많이 씀)
  1 생성자로 받아서 설정  (장점- 객체 생성시 파람으로 의존하는 개체 전부 받고 사용 가능한 상태 확인 가능-정상적 생성시 작동)
 ** new 기존클래스(DI객체)
  2 setClass 메소드를 통해서 설정. (장점- 메소드 이름 자체로 어떤 타입의 객체인지 알 수 있다)
 ** 기존클래스.setBean의PropertyName(참조하는 빈 클래스ID PropertyName)
  
  
 스프링이란??
  정의
    -객체를 생성하고 연결해주는 DI 컨테이너.
    -configLocation XML설정 정보를 참조해서 스프링 컨테이너에 객체를 만들고 조립하여 getBeand으로 꺼내오고
    -build()로 생성
    -bean property ref="의존하는 객체 클래스"
  
  스프링은 객체를 생성하고 연결해주는 DI 컨테이너이다. 
  
  
  DI- ApplicationContext로 하는 것
    -트랜잭션 처리, 스프링 설정, 웹개발, 메시지 처리.
    -Context 클래스들 알기!!!
    
  메이블 프로젝트 의존 설정 예)
    -User 자바빈 UserRepository가 가져다 쓴다. 
    
  bean태그
    -클래스 전체 명을 받아서
    -아이디로 사용 
    -ref는 DI 설정
    -bean id - 1 DI 설정, 2 생성된 객체를 꺼내쓰기 위해
    -아이디 안주면 자동 생성 - 패키지, 클래시명 다 포함되고 #숫자까지 넣어져 설정.
   
   
   생성자로 설정 <constructor-args>
    -ID, PWD 설정해서 객체 생성도 가능하다. 
    -new User("id","pwd") 와 같다.
    -객체 아닌 integer, String 등 일반 값 설정시 <value> 사용
    
    
    프로퍼티로 설정 <property>
    Threshold
    -메소드에 값 설정도 가능 setThreshold(int integ);
    -클래스의 객체 생성시 자동으로 setMethod로 5를 준다 <property name="threshold vaㅣue="5"/>
    
    ***
    Bean 설정 <property name="BeanId" ref=""/>
    다수의 Bean 설정 <property name="BeanId"><list><ref bean=""/></list></property>
    메소드에 Param 전달 <property name="MethodName" value="Param"/>
    ***
    
    스프링에서는 객체 생성 후 DI 패턴으로 연결/설계 한다.!!!
    프로퍼티, 빈 연계.
    
    BEAN에 값을 설정하는 다양한 방법
    -LIST
    -MAP
    -SET
    -PROPERTY <prop>
    
    LIST에 자바빈 객체를 집어 넣고 설정해서 --> 가져와 쓰면된다.
    
    리스트
    <list>
      <value>스트링 객체</value>
    </list>
    
    맵
    <map>
      <entry>
        <key>
          <value>
          </value>
        </key>
      </entry>
    </map>
    
    프로퍼티
    <property name="">
      <prop>
        <prop key=""></prop>
      </props>
    </property>
 
 
 Namespace 사용해서 생성자 설정
  constructor-args -- c:id (파라미터 이름 모를 때 생성자 파라미터 받는 순서 c:_0 c:_1
  property -- p: , **property list, map, set은 namespace로 설정 불가
    config.xml / config-with-namespace.xml 비교
    
 import로 여러 설정 파일 조합   
  방법 1 GenericXmlApplicationContext("classpath: 여러 개 사용
  방법 2 <beans xmlns...> <import resource = "classpath:/path/*.xml"/> </beans> 
    
    
자바 코드를 이용한 DI 설정  
  @Configuration //클래스를 스프링 DI 설정으로 사용
  public class Config{ 
    @Bean //메서드 리턴 값을 *빈 객체로* 사용 . 메소드 이름으로 ID 설정됨.
    public MethodClass method()
        return new 클래스("K","V");    
  스프링 컨테이너에 클래스로 생성된 객체를 넣는다.
   --->
    이걸로 할시에는 AnnotationConfigApplicationContext(Config.class) 사용
    
    @Bean (name="user"2) //이름 변경
  
  @import(ConfigSensor.class) 합치기 
    
  xml+java 같이 사용 - xml에서 자바 가져오기
   ConfigSensor.java 필요   --- java
   빈에서 <context:annotation-config/> <bean class="ConfigSensor"/> --- xml
   
  xml+java -java에서 xml 가져오기
    @ImportResource("")
    
    
 객체 생성을 위한
    -static 생성
    -FactoryBean 사용
    <bean factory-method=instance>
    
   FactoryBean Interface 사용무
   
   
  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    




