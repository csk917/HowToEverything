TEAMVIEWER~~연동. 

빈 관계 설정 자동화 방법 -set메소드, 생성자, 객체선언시

연상 단어
  빈 자동 / Autowired / 객체 및 setMethod 선언 (객체 타입)
  연동할 수 있는 빈이 없으면 Exception
  @Autowired @Resource
  @Component 이름 수동 가능 / 빈과 연결 자동화
  @Configuration-자바 코드 기반
  
  

<context:annotation-config>
Annotation 자동 등록 4가지
@Controller @Service @Repository @Component --Annotaiont은 자동 등록된다. 

@Autowired @Resource @Inject
-자동 등록 AnnotationMapHandler

Annotationt 전 처리기 자동 등록됨.
@Qualifier도 등록됨

5.2 생성자, 메소드, 변수에 @Autowired 의존 자동 설정 가능.
  -property tag 로 setPropertyName해서 자동 설정했었는데-->
  이제 빈이 있으면 @Autowired로 자동 설정 가능하다. 
  -타입을 설정해주면 다형성에 의해 문제없이 설정가능.
   @Autowired
   public void setErpClientFactory(ErpClientFactory erpClientFactory){
    this.erpClientFactory=erpClientFactory;
   }
   @Autowired
   public void init(객체1, 객체2){
    this.객체1
    this.객체2
    
Exception
  -스프링 빈이 존재하지 않는데 선언했을 경우
  -단 2개 같은 타입 빈이 있을 때 @Qualifer로 지정된 빈을 수동 설정하면 오류 X
  
  @Qualifer
    동일한 타입 빈 중 지정.
    
 ***@Autowired 는 타입!을 기준으로 @Resource는 이름/ID! 을 기준으로 빈을 찾는다
 
 @inject
  쓰려면 javax.inject dependency 설정 필요. 
  
  자바 코드 기반 Config. --- 아니면 component scan으로 자동 설정.
  @Component가 등록된 건 자동 등록된다. <context:component-scan-base-package>설정하면. 
  
  자동으로 객체 생성 등록시 @Componenet public class ProductService{} 소문자로 빈 이름이 등록된다.
 
 자동 스캔
  -자동 스캔 범위 좁히기
       -include-filter 등록할것 예) Service
       -exclude-filter 등록 X Dao
       
       -regex 패턴과 연계

  XML
  빈에 <qualifier value="order"/> 설정하고 값을 넣고. 
  JAVA
  빈에 @Qualifier("order")로 불러오기
  
  +getBean(3가지 생성자 받는 방법) 이 있다. 
 
 ======================================================
 
스프링 컨테이너
  -생성했다 사용하고 닫아서 종료(빈 객체 제거)할 수 있다. 
  -MVC에서는 컨테이너 개념이 없다.
  
기본적인 설정
    1 컨테이너 설정
    GenericXmlApplicationContext ctx= new GenericXmlApplicationContext();
    2 메타 정보 제공 (패스 설정)
    ctx.load("classpath:config.xml");
    3 빈 객체 생성
    ctx.refresh();
    4 컨테이너 사용
    AuthenticationService authSvc=ctx.getBean("authenticationService",AuthenticationService.class);
    5 컨테이너 종료
    ctx.close();
    
 컨테이너간 부모 자식 설정도 가능하다. 
 
  ======================================================
 
 
 빈 라이프 사이클 (빈 관여 월할시)
 
  -인터페이스 상속 받아 빈 구현
  -특정 메서드 호출하라고 지정
  -@PostConstruct @PreDestroy --기본설정에서 설정. 
 
 1 스프링 컨테이너가 빈 객체 생성
 2 프로퍼티 설정
 3 초기화 전 처리
 4 초기화
 5 처리/사용
 6 소멸
 
 메소드 처리/@ 처리/ 생성자 처리 전부 가능. 
 빈으로 등록시 afterPropertiesSet()으로 초기화하고 destroy()로 소멸 진행하는 프로세스를 거친다. 
 
 ======================================================
 
 자기 객체가 저장된 컨테이너에 접근
1  ApplicationContextAware --더 사용
2  BeanAware
  
  컨테이너에 접근.
  
 빈 객체의 범위
 
  -싱글톤이면 10번 전부 같은 타입- 싱글톤- 빈 객체 한 개만 존재 ... SPRING에서 DEFAULT가 scope="singleton"
  프로토타입이면 전부 틀린 형태 ...   
  
  -프로토타입 객체 생성 10번 반복시 -- 매번 새로운 객체로 -- PARAM으로 지정한 OrdNumber를 제외하고.
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
 
 
 
 
 
 
    
