SPRING DI

의존이란

의존 객체 직접 생성 방식
-다른 클래스의 객체를 가져다 쓴다 -- 다른 클래스 의존하기.
-다른 클래스의 생성자의 파라미터를 가져다 쓰는 경우도 있다. --- 의존하는 타입의 객체 전달받기
  
  단점?
    요구사항이 바뀌면-- 다른 클래스 객체 사용시
    해당 객체에서 바꿔줘야 한다. --- 코드양이 많아짐(각각 구현 필요)
    
  보완!
의존 객체 외부에서 조립 방식
  -다른 코드에서 의존 객체 생성
  -의존 객체를 파라미터로 전달.
  -Assembler 예제)조립품을 모아서 객체 생성해서 메소드를 가져다 쓴다. 
  -Assembler 조립기로 가져다가 변경사항이 있으면 조립기에서 변경해서 쓴다.
  -기존 클래스 정보는 그대로 유지. 
예)  private Encrytor enc;
     public Assembler(){
        enc=new FastEncryptor();
        //enc를 변경해도 Encryptor객체를 DI로 전달받는 코드는 영향받지 않는다.
        
 
 생성자 방식 VS 프로퍼티 설정 방식(더 많이 씀)
  1 생성자로 받아서 설정  (장점- 객체 생성시 파람으로 전부 받을 수 있다)
  2 setClass 메소드를 통해서 설정. (장점- 메소드 이름 자체로 어떤 타입의 객체인지 알 수 있다)
  
  
 스프링이란??
  정의
    -객체를 생성하고 연결해주는 DI 컨테이너.
    -configLocation XML설정 정보를 참조해서 스프링 컨테이너에 객체를 만들고 조립하여 getBeand으로 꺼내오고
    -build()로 생성
    -bean property ref="의존하는 객체 클래스"
  
  컨테이너에 저장된 객체를 가져다 쓰기 위해서
  
  
  DI- ApplicationContext로 하는 것
    -트랜잭션 처리, 스프링 설정, 웹개발, 메시지 처리.
    -Context 클래스들 알기!!!
    
  메이블 프로젝트 의존 설정 예)
    -User 자바빈 UserRepository가 가져다 쓴다. 
    
  bean태그
    -클래스 전체 명을 받아서
    -아이디로 사용 
  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    




