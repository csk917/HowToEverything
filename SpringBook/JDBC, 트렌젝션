1:1대조식

JDBC api로 DB 접근.
JPA 또는 ORM 프레임워크도 사용 가능 (스프링 말고)

DataSource-DB 연결 방법- 커넥션 객체 구함. 1커낵션 풀 2JNDI 3DriverManager
JNDI 많이 사용.

JdbcTemplate- 이 클래스로 JDBC api 사용에 필요한 메소드를 단축 시킬 수 있다.
커넥션 관리 중복 코드를 줄인다-- jdbcTemplate.query()]
SQLException

-커넥션 풀 사용- c3p0
-jndi-lookup id=dataSource 를 이용해서 커넥션 얻기. 

JDBC- 템플릿으로 사용

query()
queryForList()
RowMapper- ResultSet에서 가져와 원하는 타입으로 매핑할 때 사용.

Anonymous inner class!!!!?? http://happystory.tistory.com/64
인터페이스를 implement하지 않고 단편적으로 잠깐 쓸 때만.(클래스 안에서 사용하면서)

sqlParameterSource- 자바빈과 연결 작업한다. 

simplejdbcinsert- column에 값 설정. query 사용 없이
테이블과 연결하기. 

=============================

트렌젝션
  -결제와 동시에 좌석을 할당
  -1 결제 2 결제 내역 저장 3 구매 내역 저장
  ACID- Atomicity원자성- 한 개 이상 동작을 한 개 작업 단위로 묶고
        Consistency일관성- 트렌젝션 종류시 비즈니스 로직 대기
        Isolation고립성- 다른 트렌젝션과 독립적 실행
        Durability지속성- 트렌젝션 완성 후 결과 유지. 
        
 =============
 
 코드로 
 
 설정
 <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@istudy.iptime.org:7000:ORCL" />
		<property name="user" value="KH1601" />
		<property name="password" value="oracle" />
	</bean>
  
  <bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
  
 /*
 
 트렌젝션 메니저로 관리하겠다 설정. 
 
 */
 
 자바
 @Override
	public PurchaseOrderResult order(PurchaseOrderRequest orderRequest)
			throws ItemNotFoundException {
		Item item = itemDao.findById(orderRequest.getItemId());
		if (item == null)
			throw new ItemNotFoundException(orderRequest.getItemId());

		PaymentInfo paymentInfo = new PaymentInfo(item.getPrice());
		paymentInfoDao.insert(paymentInfo);

		PurchaseOrder order = new PurchaseOrder(item.getId(), orderRequest
				.getAddress(), paymentInfo.getId());
		purchaseOrderDao.insert(order);
		return new PurchaseOrderResult(item, paymentInfo, order);
	}
  
  /*
 itemDao.findById ID에 해당되는 값을 찾고
 insert() 입력으로 결제 정보를 삽입. 
 insert(order) 주문넣기. 
 
 트렌젝션 autoCommit-을 수동 설정
 
 */
 
 <bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<bean id="placeOrderService"
		class="net.madvirus.spring4.chap12.store.service.PlaceOrderServiceTxTemplateImpl">
		<property name="itemDao" ref="itemDao" />
		<property name="paymentInfoDao" ref="paymentInfoDao" />
		<property name="purchaseOrderDao" ref="purchaseOrderDao" />
		<property name="transactionTemplate" ref="transactionTemplate" />
	</bean>
  
  @Override
	public PurchaseOrderResult order(final PurchaseOrderRequest orderRequest)
			throws ItemNotFoundException {
		return transactionTemplate
				.execute(new TransactionCallback<PurchaseOrderResult>() {
					@Override
					public PurchaseOrderResult doInTransaction(
							TransactionStatus status) {
						Item item = itemDao.findById(orderRequest.getItemId());
						if (item == null)
							throw new ItemNotFoundException(orderRequest.getItemId());

						PaymentInfo paymentInfo = new PaymentInfo(item.getPrice());
						paymentInfoDao.insert(paymentInfo);

						PurchaseOrder order = new PurchaseOrder(item.getId(),
								orderRequest.getAddress(), paymentInfo.getId());
						purchaseOrderDao.insert(order);

						return new PurchaseOrderResult(item, paymentInfo, order);
					}
				});
  /*
  트렌젝션 template을 이용함. 
  
  */
  
  설정으로 트렌젝션 적용
  tx:advice
    -설정에 의한 트렌젝션 처리 -- 태그 사용함
    -AOP로 트렌젝션 처리도 가능 propagation="REQUIRED" 받드시 트렌젝션 처리하게함. 
 
 
 @로 트렌젝션 처리
     @Transactional-- <tx:annotation-driven> 필요
     
  
 =============
        
        
        
  
