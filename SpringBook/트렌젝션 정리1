2.2 JDBC 기반 트랜젝션 관리자 설정.

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
  
  /*
  1 dataSource- JDBC 연동 후 DataSourceTransactionManager 트랜젝션 관리자 실행. 
  2 Datasource로 부터 connection가져온 후  Connection- commit(), rollback()등을 실행함. 
  
  */
  
2.3 TransactionTemplate을 이용한 트랜젝션

public class PlaceOrderServiceImpl implements PlaceOrderService {
...

    @Override
      public PurchaseOrderResult order(PurchaseOrderRequest orderRequest)
          throws ItemNotFoundException {
        Item item = itemDao.findById(orderRequest.getItemId());//itemId로 아이템 찾기(아이템에 해당 속성++)
        if (item == null)
          throw new ItemNotFoundException(orderRequest.getItemId());

        PaymentInfo paymentInfo = new PaymentInfo(item.getPrice()); //PaymentInfo(id, integer)
        paymentInfoDao.insert(paymentInfo);

        PurchaseOrder order = new PurchaseOrder(item.getId(), orderRequest
            .getAddress(), paymentInfo.getId()); //PurchaseOrder(id, itemId, address, paymentInfoId)
        purchaseOrderDao.insert(order);
        return new PurchaseOrderResult(item, paymentInfo, order); //PurchaseOrderResult(item, paymentInfo, order)
      }
      
   /*
   1 상품 구매 서비스- PlaceOrderService 인터페이스로 부터 메소드 order로 (orderRequest 주문 요청 파람을 받아서)
   2 findById(아이템 ID로 요청한 항목 name ItemId를 받아서 쿼리를 돌린다. 
   rowmap: mapRow(java.sql.ResultSet rs, int rowNum)  Map each row of data in the ResultSet.
   3 상품 구매 정보-- item.getPrice() 가격으로 찾아서
   4 신규 주문 생성
   5 주문 결과(정보) 응답 처리- item, paymentInfo, order 값을 갖고
   */
   
3.1 Transaction Template AND TransactionCallback으로 트랜젝션 처리 

   	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- TransactionTemplate을 이용한 트랜잭션 구현 -->
	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>

/*
1 TransactionTemplate 사용을 위해 빈 설정
2 이 객체로 DB 트랜젝션 처리. 
*/

public class PlaceOrderServiceTxTemplateImpl implements PlaceOrderService {

	private ItemDao itemDao;
	private PaymentInfoDao paymentInfoDao;
	private PurchaseOrderDao purchaseOrderDao;

	private TransactionTemplate transactionTemplate;
  
  ...//set 생성자로 DI 처리 들어간다. 
  
  @Override
	public PurchaseOrderResult order(final PurchaseOrderRequest orderRequest)
			throws ItemNotFoundException {
		return transactionTemplate
				.execute(new TransactionCallback<PurchaseOrderResult>() {
					@Override
					public PurchaseOrderResult doInTransaction(
							TransactionStatus status) {
						Item item = itemDao.findById(orderRequest.getItemId());
						if (item == null)
							throw new ItemNotFoundException(orderRequest.getItemId());

						PaymentInfo paymentInfo = new PaymentInfo(item.getPrice());
						paymentInfoDao.insert(paymentInfo);

						PurchaseOrder order = new PurchaseOrder(item.getId(),
								orderRequest.getAddress(), paymentInfo.getId());
						purchaseOrderDao.insert(order);

						return new PurchaseOrderResult(item, paymentInfo, order);
					}
				});

  /*
  1 execute 메서드는 내부적으로 TransactionManager를 사용해서 트랜젝션을 시작한 뒤 파라미터로 받은
  doInTransaction 메서드를 실행함. doInTransaction이 실행되고 execute()메서드가 트렌젝션을 커밋하고 결과를
  리턴. 
  다시 한번 순서
  요청            TrnsactionTemplate            action:TransactionCallback              :PlatformTransactionManager      status:TransactionStatus
  1 (설정) TransactionCallback 객체 생성 action:TransactionCallback
  2 execute(action) 2.1 getTransaction() 2.1.1 status:TransactionStatus 2.1.2 return status
  2.2 doIntransaction(status) 2.3 return result 2.4 commit(status)
  2.5 return result
  
  */
